@if (Hidden == false)
{
	if (partidosPoliticos == null || candidatosPoliticos == null || hojasDeVida == null || Results == null || PartyResults == null || planesDeGobierno == null)
	{
		<p><em>Cargando...</em></p>
	}
	else
	{
		<h1>Resultados:</h1>
		<p>Candidatos que cumplen todos tus criterios: @agreed de @Results.Count()*</p>
		<p>Mostrando top @PartyResults.Count() partidos</p>
		<p></p>
		<p>*Candidatos sin hoja de vida disponible no aparecen en los resultados</p>
		<hr>

		@foreach (var winnerResult in PartyResults)
		{
			if (winnerResult != null)
			{
				<h2 width="100%">@textInfo.ToTitleCase(winnerResult.Partido.strOrganizacionPolitica.ToLower())</h2>
				<div class="ParentColumns">
					<div class="ColumnThird">
						<img src="@($"sample-data/Logo/{winnerResult.Partido.idOrganizacionPolitica}.png")" alt="Logo" height="100px" width="100px" />
					</div>
					<div class="ColumnTwoThirds">
						<p>
							Estado de inscripción:
							<strong class="@Helpers.UppercaseFirstRestLower(winnerResult.Partido.strEstadoLista)">@Helpers.UppercaseFirstRestLower(winnerResult.Partido.strEstadoLista)</strong>
						</p>
					</div>
				</div>

				<br />

				<h3>Plan de gobierno</h3>

				@if (winnerResult.Partido.idPlanGobierno != 0)
				{
					<a target="_blank" href="sample-data/@(winnerResult.Partido.strCarpeta+winnerResult.Partido.idPlanGobierno+".pdf")">
						Link plan de gobierno completo
					</a>
				}

				<ResumenPlanDeGobierno Title="Resumen plan de gobierno" PlanDeGobierno="@winnerResult.Plan"></ResumenPlanDeGobierno>

				<br />

				<h3>Candidatos</h3>

				<div class="ParentColumns">
					@for (int i = 0; i < winnerResult.Candidato.Count(); i++)
					{
						<div class="ColumnHalf" style="padding:10px">
							<HojaDeVidaComponent Title="@($"Número en lista: {winnerResult.Candidato[i].intPosicion} <br/> Cumple tus criterios: {winnerResult.AgreePercentage[i]:0.##}%")"
												 Candidate="@winnerResult.Candidato[i]" HojasDeVida="@winnerResult.HojasDeVida" />
						</div>
					}
				</div>



				<hr>
			}
		}

		<style type="text/css">
			.Inscrito {
				background-color: palegreen;
			}

			.Admitido {
				background-color: palegreen;
			}

			.Improcedente {
				background-color: palevioletred;
			}

			.Apelación {
				background-color: lightyellow;
			}

			.Tacha {
				background-color: lightyellow;
			}

			.Si {
				background-color: palegreen;
			}

			.No {
				background-color: palevioletred;
			}

			.ColumnHalf {
				float: left;
				align-content: center;
				text-align: center;
				display: table-cell;
				flex: 50%;
				border: 1px solid gray;
				min-width: 200px;
			}

			.ColumnThird {
				float: left;
				flex: 33%;
				align-content: center;
				text-align: center;
				min-width: 200px;
			}

			.ColumnTwoThirds {
				float: left;
				display: table-cell;
				flex: 66%;
				min-width: 200px;
			}

			.ParentColumns {
				overflow: hidden;
				width: 100%;
				display: flex;
				flex-wrap: wrap;
			}
		</style>

	}
}

@code {
	[Parameter]
	public List<Result> Results { get; set; }

	[Parameter]
	public List<PartidoPolitico> partidosPoliticos { get; set; }

	[Parameter]
	public List<CandidatoGeneral> candidatosPoliticos { get; set; }

	[Parameter]
	public List<HojaDeVida> hojasDeVida { get; set; }

	[Parameter]
	public List<PlanDeGobierno> planesDeGobierno { get; set; }

	/// <summary>
	/// Ignored if 100%
	/// </summary>
	[Parameter]
	public int MaxParties { get; set; }

	/// <summary>
	/// Ignored if 100%
	/// </summary>
	[Parameter]
	public int MaxCandidatesPerParty { get; set; }

	[Parameter]
	public bool Hidden
	{
		get
		{
			return hidden;
		}
		set
		{
			if (value == false)
			{
				UpdateResults();
			}

			hidden = value;
		}
	}

	private bool hidden;

	private int agreed = 0;

	private TextInfo textInfo;

	private List<Party> PartyResults { get; set; }

	protected override async Task OnInitializedAsync()
	{
		textInfo = new CultureInfo("es-PE", false).TextInfo;
	}

	private void UpdateResults()
	{
		//how many agree
		Results = Results.OrderByDescending(x => x.Agree).ThenByDescending(x => x.AgreePercentage).ToList();
		agreed = Results.Count(x => x.Agree == true);

		//create object
		PartyResults = new List<Party>();


		for (int i = 0;
			i < Results.Count();
			i++)
		{
			var candidate = candidatosPoliticos.Where(x => x.idCandidato == Results[i].Id).FirstOrDefault();
			var partido = partidosPoliticos.Where(x => x.idOrganizacionPolitica == candidate.idOrganizacionPolitica).FirstOrDefault();
			var hojaDeVida = hojasDeVida.Where(x => x.DatosPersonales.idHojaVida == candidate.idHojaVida).FirstOrDefault();
			var plan = planesDeGobierno.Where(x => x.idOrganizacionPolitica == candidate.idOrganizacionPolitica).FirstOrDefault();

			if (candidate != null && partido != null && hojaDeVida != null && planesDeGobierno != null)
			{
				if (PartyResults.Any(x => x.Partido.idOrganizacionPolitica == partido.idOrganizacionPolitica))
				{
					var existing = PartyResults.Where(x => x.Partido.idOrganizacionPolitica == partido.idOrganizacionPolitica).FirstOrDefault();

					if ((Results[i].AgreePercentage > 75 && existing.Candidato.Count() < MaxCandidatesPerParty) 
						|| Results[i].AgreePercentage == 100)
					{
						existing.Candidato.Add(candidate);
						existing.HojasDeVida.Add(hojaDeVida);
						existing.AgreePercentage.Add(Results[i].AgreePercentage);
					}
				}
				else
				{
					if ((Results[i].AgreePercentage > 75 && PartyResults.Count() < MaxParties) 
						|| Results[i].AgreePercentage == 100)
					{
						var party = new Party
						{
							Partido = partido,
							Plan = plan
						};
						party.Candidato.Add(candidate);
						party.HojasDeVida.Add(hojaDeVida);
						party.AgreePercentage.Add(Results[i].AgreePercentage);
						PartyResults.Add(party);
					}
				}
			}
		}




	}

	public class Party
	{
		public PartidoPolitico Partido { get; set; }

		public List<CandidatoGeneral> Candidato { get; set; } = new List<CandidatoGeneral>();

		public List<HojaDeVida> HojasDeVida { get; set; } = new List<HojaDeVida>();

		public PlanDeGobierno Plan { get; set; }

		public List<double> AgreePercentage { get; set; } = new List<double>();
	}
}
