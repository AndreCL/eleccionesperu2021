@page "/testcongreso"
@inject HttpClient Http

<QuestionComponent Questions="questions" Completed="@ShowResults"></QuestionComponent>

<ResultsComponent Results="@results" Hidden="@HideResultsBar"></ResultsComponent>

@code {
	private List<Result> results = new List<Result> { };
	private List<Question> questions = new List<Question> { };
	private List<PartidoPolitico> partidosPoliticos;
	private List<CandidatoGeneral> candidatosPoliticos = new List<CandidatoGeneral>();
	private List<HojaDeVida> hojasDeVida;
	private UbigeoItemLite[] ubigeos;


	private bool HideResultsBar = true;

	public void LoadResults()
	{
		foreach (var candidate in candidatosPoliticos)
		{
			results.Add(new Result()
			{
				Id = candidate.idCandidato,
				ImageRoute = $"sample-data{candidate.strRutaArchivo.Replace("Assets", "ASSETS")}",
				Name = candidate.strCandidato
			});
		}
		results = results.OrderBy(a => Guid.NewGuid()).ToList();
	}

	public void ShowResults()
	{
		//todo: uncomment
		//HideResultsBar = true;
		StateHasChanged();
	}

	private async Task LoadParties(UbigeoItemLite ubigeoItem)
	{
		var temp = await Http.GetFromJsonAsync<PartidoPolitico[]>($"sample-data/cong/Party{ubigeoItem.strUbigeoDistritoElectoral}.json");

		//Filter out improsedente
		partidosPoliticos = temp.ToList();
	}

	private async Task LoadCandidates(UbigeoItemLite ubigeoItem)
	{
		var temp = await Http.GetFromJsonAsync<CandidatoGeneral[]>($"sample-data/cong/Candidate{ubigeoItem.strUbigeoDistritoElectoral}.json");
		candidatosPoliticos = temp.ToList().Where(
			x => !x.strEstadoExp.Equals("IMPROCEDENTE", StringComparison.InvariantCultureIgnoreCase)).ToList();

		LoadResults();

		HideResultsBar = false;

		StateHasChanged();
	}

	private async Task LoadHDV(UbigeoItemLite ubigeoItem)
	{
		var temp = await Http.GetFromJsonAsync<HojaDeVida[]>($"sample-data/cong/HDV{ubigeoItem.strUbigeoDistritoElectoral}.json");
		hojasDeVida = temp.ToList();
	}

	protected override async Task OnInitializedAsync()
	{
		ubigeos = await Http.GetFromJsonAsync<UbigeoItemLite[]>("sample-data/cong/ubigeoCon.json");



		Question question0 = new Question
		{
			Title = "Distrito electoral",
			Description = "",
			Options = ubigeos.Select(x => x.strDistritoElectoral.ToLower()).ToList(),
			HideSinImportancia = true,
			OnNext = loadByUbigeo
		};
		questions.Add(question0);

		Question question1 = new Question
		{
			Title = "Sentencias",
			Description = "Lista representa solo a los candidatos de un partido en el distrito electoral seleccionado",
			Options = new List<string> { "Candidatos sin sentencias", "Listas sin candidatos con sentencias" },
			OnNext = filterBySentencias
		};
		questions.Add(question1);

	}

	#region actions
	public void filterBySentencias(string option)
	{
		List<CandidatoGeneral> failed = new List<CandidatoGeneral>();

		if (option.Equals("1", StringComparison.InvariantCultureIgnoreCase))
		{
			foreach (var i in candidatosPoliticos)
			{
				var hoja = hojasDeVida.Where(x => x.DatosPersonales.idHojaVida == i?.idHojaVida).FirstOrDefault();

				if (hoja != null &&
					(hoja.SentenciaPenal.Where(x => x.strTengoSentenciaPenal.Equals("1", StringComparison.InvariantCultureIgnoreCase)).Count() > 0 ||
					hoja.SentenciaObliga.Where(x => x.strTengoSentenciaObliga.Equals("1", StringComparison.InvariantCultureIgnoreCase)).Count() > 0)
					)
				{
					failed.Add(i);
				}
			}
		}
		if (option.Equals("2", StringComparison.InvariantCultureIgnoreCase))
		{
			foreach (var i in candidatosPoliticos)
			{
				var hoja = hojasDeVida.Where(x => x.DatosPersonales.idHojaVida == i?.idHojaVida).FirstOrDefault();

				if (hoja != null &&
					(hoja.SentenciaPenal.Where(x => x.strTengoSentenciaPenal.Equals("1", StringComparison.InvariantCultureIgnoreCase)).Count() > 0 ||
					hoja.SentenciaObliga.Where(x => x.strTengoSentenciaObliga.Equals("1", StringComparison.InvariantCultureIgnoreCase)).Count() > 0)
					)
				{
					failed.Add(i);
				}
			}
			if (failed.Count() > 0)
			{
				foreach (var i in candidatosPoliticos)
				{

					@if ((!failed.Any(x => x.idCandidato == i.idCandidato)) && //not already in list
					   failed.Any(x => x.idOrganizacionPolitica == i.idOrganizacionPolitica)) //same party as someone in list
					{
						failed.Add(i);
					}
				}
			}
		}

		foreach (var i in candidatosPoliticos)
		{
			if (failed.Count > 0 && failed.Exists(x => x.idCandidato == i.idCandidato))
			{
				results.Where(x => x.Id == i.idCandidato).FirstOrDefault().AddCounter(false);
			}
			else
			{
				results.Where(x => x.Id == i.idCandidato).FirstOrDefault().AddCounter(true);
			}
		}

		StateHasChanged();
	}

	public void loadByUbigeo(string option)
	{
		var ubigeosList = ubigeos.Select(x => x.strDistritoElectoral.ToLower()).ToList();

		//index is option - 1
		var chosenUbigeoIndex = int.Parse(option) - 1;
		var chosenUbigeoName = ubigeosList[chosenUbigeoIndex];
		var chosenUbigeo = ubigeos.Where(x =>
		x.strDistritoElectoral.Equals(chosenUbigeoName, StringComparison.InvariantCultureIgnoreCase)).FirstOrDefault();

		var task = LoadCandidates(chosenUbigeo);

		var task2 = LoadParties(chosenUbigeo);

		var task3 = LoadHDV(chosenUbigeo);

		StateHasChanged();
	}
	#endregion
}
